
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000043e  000004d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800104  00800104  000004d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000508  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d91  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b1  00000000  00000000  00001371  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000650  00000000  00000000  00001d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00002374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000587  00000000  00000000  000024f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e9  00000000  00000000  00002a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002e64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	43 c1       	rjmp	.+646    	; 0x2bc <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e3       	ldi	r30, 0x3E	; 62
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5b d1       	rcall	.+694    	; 0x37a <main>
  c4:	ba c1       	rjmp	.+884    	; 0x43a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	81 f0       	breq	.+32     	; 0xec <initUSART+0x24>
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ea:	08 95       	ret
  ec:	e9 ec       	ldi	r30, 0xC9	; 201
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
  f6:	ea ec       	ldi	r30, 0xCA	; 202
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
 100:	83 e3       	ldi	r24, 0x33	; 51
 102:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 106:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 10a:	08 95       	ret

0000010c <USART_Flush>:
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	29 f4       	brne	.+10     	; 0x11a <USART_Flush+0xe>
 110:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 114:	88 23       	and	r24, r24
 116:	74 f0       	brlt	.+28     	; 0x134 <USART_Flush+0x28>
 118:	08 95       	ret
 11a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 11e:	88 23       	and	r24, r24
 120:	8c f4       	brge	.+34     	; 0x144 <USART_Flush+0x38>
 122:	a6 ec       	ldi	r26, 0xC6	; 198
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e0 ec       	ldi	r30, 0xC0	; 192
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	8c 91       	ld	r24, X
 12c:	80 81       	ld	r24, Z
 12e:	88 23       	and	r24, r24
 130:	e4 f3       	brlt	.-8      	; 0x12a <USART_Flush+0x1e>
 132:	08 95       	ret
 134:	ae ec       	ldi	r26, 0xCE	; 206
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e8 ec       	ldi	r30, 0xC8	; 200
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	8c 91       	ld	r24, X
 13e:	80 81       	ld	r24, Z
 140:	88 23       	and	r24, r24
 142:	e4 f3       	brlt	.-8      	; 0x13c <USART_Flush+0x30>
 144:	08 95       	ret

00000146 <USART_Send>:
 146:	61 30       	cpi	r22, 0x01	; 1
 148:	41 f0       	breq	.+16     	; 0x15a <USART_Send+0x14>
 14a:	e0 ec       	ldi	r30, 0xC0	; 192
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	90 81       	ld	r25, Z
 150:	95 ff       	sbrs	r25, 5
 152:	fd cf       	rjmp	.-6      	; 0x14e <USART_Send+0x8>
 154:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 158:	08 95       	ret
 15a:	e8 ec       	ldi	r30, 0xC8	; 200
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	90 81       	ld	r25, Z
 160:	95 ff       	sbrs	r25, 5
 162:	fd cf       	rjmp	.-6      	; 0x15e <USART_Send+0x18>
 164:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 168:	08 95       	ret

0000016a <ButtonSignalSend>:
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	91 05       	cpc	r25, r1
 172:	49 f0       	breq	.+18     	; 0x186 <ButtonSignalSend+0x1c>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	91 05       	cpc	r25, r1
 178:	11 f0       	breq	.+4      	; 0x17e <ButtonSignalSend+0x14>
 17a:	89 2b       	or	r24, r25
 17c:	49 f4       	brne	.+18     	; 0x190 <ButtonSignalSend+0x26>
 17e:	12 b8       	out	0x02, r1	; 2
 180:	c1 e0       	ldi	r28, 0x01	; 1
 182:	d0 e0       	ldi	r29, 0x00	; 0
 184:	09 c0       	rjmp	.+18     	; 0x198 <ButtonSignalSend+0x2e>
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	82 b9       	out	0x02, r24	; 2
 18a:	c2 e0       	ldi	r28, 0x02	; 2
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	04 c0       	rjmp	.+8      	; 0x198 <ButtonSignalSend+0x2e>
 190:	82 b1       	in	r24, 0x02	; 2
 192:	82 b9       	out	0x02, r24	; 2
 194:	c0 e0       	ldi	r28, 0x00	; 0
 196:	d0 e0       	ldi	r29, 0x00	; 0
 198:	82 b1       	in	r24, 0x02	; 2
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	d4 df       	rcall	.-88     	; 0x146 <USART_Send>
 19e:	ce 01       	movw	r24, r28
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <USART_Receive>:
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	41 f0       	breq	.+16     	; 0x1ba <USART_Receive+0x14>
 1aa:	e0 ec       	ldi	r30, 0xC0	; 192
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	88 23       	and	r24, r24
 1b2:	ec f7       	brge	.-6      	; 0x1ae <USART_Receive+0x8>
 1b4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1b8:	08 95       	ret
 1ba:	e8 ec       	ldi	r30, 0xC8	; 200
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	88 23       	and	r24, r24
 1c2:	ec f7       	brge	.-6      	; 0x1be <USART_Receive+0x18>
 1c4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 1c8:	08 95       	ret

000001ca <ButtonSignalRecieve>:
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	ec 01       	movw	r28, r24
 1d0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 1d4:	88 23       	and	r24, r24
 1d6:	54 f4       	brge	.+20     	; 0x1ec <ButtonSignalRecieve+0x22>
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	e5 df       	rcall	.-54     	; 0x1a6 <USART_Receive>
 1dc:	82 b9       	out	0x02, r24	; 2
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	b2 df       	rcall	.-156    	; 0x146 <USART_Send>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	93 df       	rcall	.-218    	; 0x10c <USART_Flush>
 1e6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <count>
 1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <ButtonSignalRecieve+0x2c>
 1ec:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <count>
 1f0:	8f 5f       	subi	r24, 0xFF	; 255
 1f2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <count>
 1f6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 1fa:	86 ff       	sbrs	r24, 6
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <ButtonSignalRecieve+0x38>
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	85 df       	rcall	.-246    	; 0x10c <USART_Flush>
 202:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 206:	88 23       	and	r24, r24
 208:	14 f4       	brge	.+4      	; 0x20e <ButtonSignalRecieve+0x44>
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	7f df       	rcall	.-258    	; 0x10c <USART_Flush>
 20e:	ce 01       	movw	r24, r28
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <TimerOn>:
 216:	8b e0       	ldi	r24, 0x0B	; 11
 218:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 21c:	8d e7       	ldi	r24, 0x7D	; 125
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 224:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 22e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 232:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 236:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 23a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 23e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 242:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 246:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 24a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 24e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 252:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 256:	8f b7       	in	r24, 0x3f	; 63
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	8f bf       	out	0x3f, r24	; 63
 25c:	08 95       	ret

0000025e <TimerISR>:

const unsigned char tasksSize = 1;
task tasks[1];

void TimerISR()
{
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
	unsigned char i;
	for (i = 0;i < tasksSize;++i)
	{
		if ((tasks[i].elapsedTime >= tasks[i].period))
 262:	e8 e0       	ldi	r30, 0x08	; 8
 264:	f1 e0       	ldi	r31, 0x01	; 1
 266:	46 81       	ldd	r20, Z+6	; 0x06
 268:	57 81       	ldd	r21, Z+7	; 0x07
 26a:	60 85       	ldd	r22, Z+8	; 0x08
 26c:	71 85       	ldd	r23, Z+9	; 0x09
 26e:	82 81       	ldd	r24, Z+2	; 0x02
 270:	93 81       	ldd	r25, Z+3	; 0x03
 272:	a4 81       	ldd	r26, Z+4	; 0x04
 274:	b5 81       	ldd	r27, Z+5	; 0x05
 276:	48 17       	cp	r20, r24
 278:	59 07       	cpc	r21, r25
 27a:	6a 07       	cpc	r22, r26
 27c:	7b 07       	cpc	r23, r27
 27e:	68 f0       	brcs	.+26     	; 0x29a <TimerISR+0x3c>
		{
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 280:	ef 01       	movw	r28, r30
 282:	02 84       	ldd	r0, Z+10	; 0x0a
 284:	f3 85       	ldd	r31, Z+11	; 0x0b
 286:	e0 2d       	mov	r30, r0
 288:	88 81       	ld	r24, Y
 28a:	99 81       	ldd	r25, Y+1	; 0x01
 28c:	09 95       	icall
 28e:	99 83       	std	Y+1, r25	; 0x01
 290:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 292:	1e 82       	std	Y+6, r1	; 0x06
 294:	1f 82       	std	Y+7, r1	; 0x07
 296:	18 86       	std	Y+8, r1	; 0x08
 298:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += PERIOD;
 29a:	e8 e0       	ldi	r30, 0x08	; 8
 29c:	f1 e0       	ldi	r31, 0x01	; 1
 29e:	86 81       	ldd	r24, Z+6	; 0x06
 2a0:	97 81       	ldd	r25, Z+7	; 0x07
 2a2:	a0 85       	ldd	r26, Z+8	; 0x08
 2a4:	b1 85       	ldd	r27, Z+9	; 0x09
 2a6:	86 50       	subi	r24, 0x06	; 6
 2a8:	9f 4f       	sbci	r25, 0xFF	; 255
 2aa:	af 4f       	sbci	r26, 0xFF	; 255
 2ac:	bf 4f       	sbci	r27, 0xFF	; 255
 2ae:	86 83       	std	Z+6, r24	; 0x06
 2b0:	97 83       	std	Z+7, r25	; 0x07
 2b2:	a0 87       	std	Z+8, r26	; 0x08
 2b4:	b1 87       	std	Z+9, r27	; 0x09
	}
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <__vector_13>:

ISR(TIMER1_COMPA_vect) {
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	0b b6       	in	r0, 0x3b	; 59
 2c8:	0f 92       	push	r0
 2ca:	2f 93       	push	r18
 2cc:	3f 93       	push	r19
 2ce:	4f 93       	push	r20
 2d0:	5f 93       	push	r21
 2d2:	6f 93       	push	r22
 2d4:	7f 93       	push	r23
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	af 93       	push	r26
 2dc:	bf 93       	push	r27
 2de:	ef 93       	push	r30
 2e0:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 2e2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2e6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 2ea:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 2ee:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	a1 09       	sbc	r26, r1
 2f6:	b1 09       	sbc	r27, r1
 2f8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 2fc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 300:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 304:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 308:	89 2b       	or	r24, r25
 30a:	8a 2b       	or	r24, r26
 30c:	8b 2b       	or	r24, r27
 30e:	89 f4       	brne	.+34     	; 0x332 <__vector_13+0x76>
		TimerISR(); // Call the ISR that the user uses
 310:	a6 df       	rcall	.-180    	; 0x25e <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 312:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 316:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 31a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 31e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 322:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 326:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 32a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 32e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	}
}
 332:	ff 91       	pop	r31
 334:	ef 91       	pop	r30
 336:	bf 91       	pop	r27
 338:	af 91       	pop	r26
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	7f 91       	pop	r23
 340:	6f 91       	pop	r22
 342:	5f 91       	pop	r21
 344:	4f 91       	pop	r20
 346:	3f 91       	pop	r19
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0b be       	out	0x3b, r0	; 59
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 358:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 35c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 360:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 364:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 368:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 36c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 370:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 374:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
 378:	08 95       	ret

0000037a <main>:
}


int main(void)
{
	DDRA = 0xFF; PORTA = 0x00;
 37a:	8f ef       	ldi	r24, 0xFF	; 255
 37c:	81 b9       	out	0x01, r24	; 1
 37e:	12 b8       	out	0x02, r1	; 2
	DDRB = 0x00; PORTB = 0xFF;
 380:	14 b8       	out	0x04, r1	; 4
 382:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00;
 384:	87 b9       	out	0x07, r24	; 7
 386:	18 b8       	out	0x08, r1	; 8

	Master_Servant = 0x00;
 388:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <Master_Servant>
	initUSART(0);
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	9c de       	rcall	.-712    	; 0xc8 <initUSART>
	initUSART(1); 
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	9a de       	rcall	.-716    	; 0xc8 <initUSART>

	tasks[0].state = Start;
 394:	e8 e0       	ldi	r30, 0x08	; 8
 396:	f1 e0       	ldi	r31, 0x01	; 1
 398:	11 82       	std	Z+1, r1	; 0x01
 39a:	10 82       	st	Z, r1
	tasks[0].period = 250;
 39c:	8a ef       	ldi	r24, 0xFA	; 250
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	a0 e0       	ldi	r26, 0x00	; 0
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
 3a4:	82 83       	std	Z+2, r24	; 0x02
 3a6:	93 83       	std	Z+3, r25	; 0x03
 3a8:	a4 83       	std	Z+4, r26	; 0x04
 3aa:	b5 83       	std	Z+5, r27	; 0x05
	tasks[0].elapsedTime = 0;
 3ac:	16 82       	std	Z+6, r1	; 0x06
 3ae:	17 82       	std	Z+7, r1	; 0x07
 3b0:	10 86       	std	Z+8, r1	; 0x08
 3b2:	11 86       	std	Z+9, r1	; 0x09
	tasks[0].TickFct = &ButtonSignalRecieve;	
 3b4:	85 ee       	ldi	r24, 0xE5	; 229
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	93 87       	std	Z+11, r25	; 0x0b
 3ba:	82 87       	std	Z+10, r24	; 0x0a
	
	TimerSet(PERIOD);
 3bc:	6a ef       	ldi	r22, 0xFA	; 250
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 3c4:	c9 df       	rcall	.-110    	; 0x358 <TimerSet>
 3c6:	27 df       	rcall	.-434    	; 0x216 <TimerOn>
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
 3c8:	0f 2e       	mov	r0, r31
 3ca:	f1 e8       	ldi	r31, 0x81	; 129
 3cc:	cf 2e       	mov	r12, r31
 3ce:	d1 2c       	mov	r13, r1
 3d0:	f0 2d       	mov	r31, r0
    {
		PORTC = Master_Servant;
		if(count > 10)
		{
			TimerOff();
			Master_Servant = 0x01;
 3d2:	11 e0       	ldi	r17, 0x01	; 1
			tasks[0].state = Start;
 3d4:	c8 e0       	ldi	r28, 0x08	; 8
 3d6:	d1 e0       	ldi	r29, 0x01	; 1
			tasks[0].period = 1000;
 3d8:	0f 2e       	mov	r0, r31
 3da:	f8 ee       	ldi	r31, 0xE8	; 232
 3dc:	8f 2e       	mov	r8, r31
 3de:	f3 e0       	ldi	r31, 0x03	; 3
 3e0:	9f 2e       	mov	r9, r31
 3e2:	a1 2c       	mov	r10, r1
 3e4:	b1 2c       	mov	r11, r1
 3e6:	f0 2d       	mov	r31, r0
			tasks[0].elapsedTime = 0;
			tasks[0].TickFct = &ButtonSignalSend;
 3e8:	0f 2e       	mov	r0, r31
 3ea:	f5 eb       	ldi	r31, 0xB5	; 181
 3ec:	ef 2e       	mov	r14, r31
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	ff 2e       	mov	r15, r31
 3f2:	f0 2d       	mov	r31, r0
	
	TimerSet(PERIOD);
	TimerOn();
    while (1) 
    {
		PORTC = Master_Servant;
 3f4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Master_Servant>
 3f8:	88 b9       	out	0x08, r24	; 8
		if(count > 10)
 3fa:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <count>
 3fe:	8b 30       	cpi	r24, 0x0B	; 11
 400:	c8 f3       	brcs	.-14     	; 0x3f4 <main+0x7a>
	_avr_timer_cntcurr = _avr_timer_M;
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
 402:	f6 01       	movw	r30, r12
 404:	10 82       	st	Z, r1
    {
		PORTC = Master_Servant;
		if(count > 10)
		{
			TimerOff();
			Master_Servant = 0x01;
 406:	10 93 14 01 	sts	0x0114, r17	; 0x800114 <Master_Servant>
			tasks[0].state = Start;
 40a:	19 82       	std	Y+1, r1	; 0x01
 40c:	18 82       	st	Y, r1
			tasks[0].period = 1000;
 40e:	8a 82       	std	Y+2, r8	; 0x02
 410:	9b 82       	std	Y+3, r9	; 0x03
 412:	ac 82       	std	Y+4, r10	; 0x04
 414:	bd 82       	std	Y+5, r11	; 0x05
			tasks[0].elapsedTime = 0;
 416:	1e 82       	std	Y+6, r1	; 0x06
 418:	1f 82       	std	Y+7, r1	; 0x07
 41a:	18 86       	std	Y+8, r1	; 0x08
 41c:	19 86       	std	Y+9, r1	; 0x09
			tasks[0].TickFct = &ButtonSignalSend;
 41e:	fb 86       	std	Y+11, r15	; 0x0b
 420:	ea 86       	std	Y+10, r14	; 0x0a
			TimerSet(PERIOD);
 422:	6a ef       	ldi	r22, 0xFA	; 250
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	90 e0       	ldi	r25, 0x00	; 0
			TimerOn();
 42a:	96 df       	rcall	.-212    	; 0x358 <TimerSet>
 42c:	f4 de       	rcall	.-536    	; 0x216 <TimerOn>
			USART_Send(PORTA, 1);
 42e:	82 b1       	in	r24, 0x02	; 2
 430:	61 2f       	mov	r22, r17
 432:	89 de       	rcall	.-750    	; 0x146 <USART_Send>
 434:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <count>
			count = 0x00;
 438:	dd cf       	rjmp	.-70     	; 0x3f4 <main+0x7a>

0000043a <_exit>:
 43a:	f8 94       	cli

0000043c <__stop_program>:
 43c:	ff cf       	rjmp	.-2      	; 0x43c <__stop_program>
