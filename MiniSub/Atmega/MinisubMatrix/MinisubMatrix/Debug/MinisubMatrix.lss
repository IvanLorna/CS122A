
MinisubMatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000282  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800104  00800104  0000031a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a55  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ae  00000000  00000000  00000e39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a4  00000000  00000000  000016e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c8  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ac  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000021fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	ac c0       	rjmp	.+344    	; 0x18e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e8       	ldi	r30, 0x82	; 130
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 32       	cpi	r26, 0x28	; 40
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b3 d0       	rcall	.+358    	; 0x22a <main>
  c4:	dc c0       	rjmp	.+440    	; 0x27e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ReadPWM>:
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
  c8:	20 b1       	in	r18, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	e8 5f       	subi	r30, 0xF8	; 248
  ce:	fe 4f       	sbci	r31, 0xFE	; 254
  d0:	20 83       	st	Z, r18
  d2:	87 30       	cpi	r24, 0x07	; 7
  d4:	91 05       	cpc	r25, r1
  d6:	14 f4       	brge	.+4      	; 0xdc <ReadPWM+0x14>
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	08 95       	ret
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	08 95       	ret

000000e2 <UpdateMatrix>:
  e2:	fc 01       	movw	r30, r24
  e4:	e8 5f       	subi	r30, 0xF8	; 248
  e6:	fe 4f       	sbci	r31, 0xFE	; 254
  e8:	20 81       	ld	r18, Z
  ea:	28 b9       	out	0x08, r18	; 8
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	08 2e       	mov	r0, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <UpdateMatrix+0x16>
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <UpdateMatrix+0x12>
  fc:	20 95       	com	r18
  fe:	2b b9       	out	0x0b, r18	; 11
 100:	87 30       	cpi	r24, 0x07	; 7
 102:	91 05       	cpc	r25, r1
 104:	14 f4       	brge	.+4      	; 0x10a <UpdateMatrix+0x28>
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	08 95       	ret
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret

00000110 <TimerISR>:
 110:	ef 92       	push	r14
 112:	ff 92       	push	r15
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	c0 e1       	ldi	r28, 0x10	; 16
 11e:	d1 e0       	ldi	r29, 0x01	; 1
 120:	0f 2e       	mov	r0, r31
 122:	f8 e2       	ldi	r31, 0x28	; 40
 124:	ef 2e       	mov	r14, r31
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	ff 2e       	mov	r15, r31
 12a:	f0 2d       	mov	r31, r0
 12c:	8e 01       	movw	r16, r28
 12e:	4e 81       	ldd	r20, Y+6	; 0x06
 130:	5f 81       	ldd	r21, Y+7	; 0x07
 132:	68 85       	ldd	r22, Y+8	; 0x08
 134:	79 85       	ldd	r23, Y+9	; 0x09
 136:	8a 81       	ldd	r24, Y+2	; 0x02
 138:	9b 81       	ldd	r25, Y+3	; 0x03
 13a:	ac 81       	ldd	r26, Y+4	; 0x04
 13c:	bd 81       	ldd	r27, Y+5	; 0x05
 13e:	48 17       	cp	r20, r24
 140:	59 07       	cpc	r21, r25
 142:	6a 07       	cpc	r22, r26
 144:	7b 07       	cpc	r23, r27
 146:	58 f0       	brcs	.+22     	; 0x15e <TimerISR+0x4e>
 148:	ea 85       	ldd	r30, Y+10	; 0x0a
 14a:	fb 85       	ldd	r31, Y+11	; 0x0b
 14c:	88 81       	ld	r24, Y
 14e:	99 81       	ldd	r25, Y+1	; 0x01
 150:	09 95       	icall
 152:	99 83       	std	Y+1, r25	; 0x01
 154:	88 83       	st	Y, r24
 156:	1e 82       	std	Y+6, r1	; 0x06
 158:	1f 82       	std	Y+7, r1	; 0x07
 15a:	18 86       	std	Y+8, r1	; 0x08
 15c:	19 86       	std	Y+9, r1	; 0x09
 15e:	f8 01       	movw	r30, r16
 160:	86 81       	ldd	r24, Z+6	; 0x06
 162:	97 81       	ldd	r25, Z+7	; 0x07
 164:	a0 85       	ldd	r26, Z+8	; 0x08
 166:	b1 85       	ldd	r27, Z+9	; 0x09
 168:	86 50       	subi	r24, 0x06	; 6
 16a:	9f 4f       	sbci	r25, 0xFF	; 255
 16c:	af 4f       	sbci	r26, 0xFF	; 255
 16e:	bf 4f       	sbci	r27, 0xFF	; 255
 170:	86 83       	std	Z+6, r24	; 0x06
 172:	97 83       	std	Z+7, r25	; 0x07
 174:	a0 87       	std	Z+8, r26	; 0x08
 176:	b1 87       	std	Z+9, r27	; 0x09
 178:	2c 96       	adiw	r28, 0x0c	; 12
 17a:	ce 15       	cp	r28, r14
 17c:	df 05       	cpc	r29, r15
 17e:	b1 f6       	brne	.-84     	; 0x12c <TimerISR+0x1c>
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	08 95       	ret

0000018e <__vector_13>:
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	0b b6       	in	r0, 0x3b	; 59
 19a:	0f 92       	push	r0
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	4f 93       	push	r20
 1a2:	5f 93       	push	r21
 1a4:	6f 93       	push	r22
 1a6:	7f 93       	push	r23
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	af 93       	push	r26
 1ae:	bf 93       	push	r27
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
 1b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1b8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1bc:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 1c0:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	a1 09       	sbc	r26, r1
 1c8:	b1 09       	sbc	r27, r1
 1ca:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1ce:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1d2:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 1d6:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 1da:	89 2b       	or	r24, r25
 1dc:	8a 2b       	or	r24, r26
 1de:	8b 2b       	or	r24, r27
 1e0:	89 f4       	brne	.+34     	; 0x204 <__vector_13+0x76>
 1e2:	96 df       	rcall	.-212    	; 0x110 <TimerISR>
 1e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ec:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1f0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1f4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1f8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1fc:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 200:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	4f 91       	pop	r20
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	0b be       	out	0x3b, r0	; 59
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <main>:
}


int main(void)
{
   DDRA = 0x00; PORTA = 0xFF; //PINA as input
 22a:	11 b8       	out	0x01, r1	; 1
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	82 b9       	out	0x02, r24	; 2
   DDRC = 0xFF; PORTC = 0x00; //PORTC as output
 230:	87 b9       	out	0x07, r24	; 7
 232:	18 b8       	out	0x08, r1	; 8
   DDRD = 0xFF; PORTD = 0x00; //PORTD as output
 234:	8a b9       	out	0x0a, r24	; 10
 236:	1b b8       	out	0x0b, r1	; 11
   
   tasks[0].state = 0;
 238:	e0 e1       	ldi	r30, 0x10	; 16
 23a:	f1 e0       	ldi	r31, 0x01	; 1
 23c:	11 82       	std	Z+1, r1	; 0x01
 23e:	10 82       	st	Z, r1
   tasks[0].period = 250;
 240:	8a ef       	ldi	r24, 0xFA	; 250
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	a0 e0       	ldi	r26, 0x00	; 0
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	82 83       	std	Z+2, r24	; 0x02
 24a:	93 83       	std	Z+3, r25	; 0x03
 24c:	a4 83       	std	Z+4, r26	; 0x04
 24e:	b5 83       	std	Z+5, r27	; 0x05
   tasks[0].elapsedTime = 0;
 250:	16 82       	std	Z+6, r1	; 0x06
 252:	17 82       	std	Z+7, r1	; 0x07
 254:	10 86       	std	Z+8, r1	; 0x08
 256:	11 86       	std	Z+9, r1	; 0x09
   tasks[0].TickFct = &ReadPWM;
 258:	24 e6       	ldi	r18, 0x64	; 100
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	33 87       	std	Z+11, r19	; 0x0b
 25e:	22 87       	std	Z+10, r18	; 0x0a
   
   tasks[1].state = 0;
 260:	15 86       	std	Z+13, r1	; 0x0d
 262:	14 86       	std	Z+12, r1	; 0x0c
   tasks[1].period = 250;
 264:	86 87       	std	Z+14, r24	; 0x0e
 266:	97 87       	std	Z+15, r25	; 0x0f
 268:	a0 8b       	std	Z+16, r26	; 0x10
 26a:	b1 8b       	std	Z+17, r27	; 0x11
   tasks[1].elapsedTime = 0;
 26c:	12 8a       	std	Z+18, r1	; 0x12
 26e:	13 8a       	std	Z+19, r1	; 0x13
 270:	14 8a       	std	Z+20, r1	; 0x14
 272:	15 8a       	std	Z+21, r1	; 0x15
   tasks[1].TickFct = &UpdateMatrix;
 274:	81 e7       	ldi	r24, 0x71	; 113
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	97 8b       	std	Z+23, r25	; 0x17
 27a:	86 8b       	std	Z+22, r24	; 0x16
 27c:	ff cf       	rjmp	.-2      	; 0x27c <main+0x52>

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
